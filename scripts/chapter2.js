// ECMAScript 中所有函数的参数都是按值传递的。也就是说，把函数外部的值复制给函数内部的参
// 数，就和把值从一个变量复制到另一个变量一样。基本类型值的传递如同基本类型变量的复制一样，而
// 引用类型值的传递，则如同引用类型变量的复制一样。有不少开发人员在这一点上可能会感到困惑，因
// 为访问变量有按值和按引用两种方式，而参数只能按值传递。
// 在向参数传递基本类型的值时，被传递的值会被复制给一个局部变量（即命名参数，或者用
// ECMAScript 的概念来说，就是 arguments 对象中的一个元素）。在向参数传递引用类型的值时，会把
// 这个值在内存中的地址复制给一个局部变量，因此这个局部变量的变化会反映在函数的外部。请看下面
// 这个例子

let obj = {a:1};
function testTrans(obj){
    obj.a = 2;
}
testTrans(obj);
console.log(obj);// 2

let count = 0;
function func(num){
    num = 2;
}
func(count);
console.log(count);// 0